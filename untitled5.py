# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12IOVwcSyE5jMPWhzoI9yOTfjLXJkTn-1
"""

# Concatenar 2 listas
a = [1,8]
b = ['hola','hoy']
c = a + b
print('c es: ',c)

# Extender una lista con otra lista
a = [1,8]
b = ['hola','hoy']
c = [1,8]
print('a antes de extend es:',a)
a.extend(b)
print('a despues de extend es:',a)
print('b es:',b)
c.extend([4])
print(c)
c.append([1,2])     #Agrega como un solo elemento
print(c)

# Repetir una lista 3 veces
a = [1,8]
print('la lista repetida es: ',a*3)

# Comparar una lista
a = [1,8]
b = [1,8,3]
c = ['1','8']
d = [1,8]
e = [8,2]
f = [8,1,5,4]

print('a == b:',a == b)
print('a == c:',a == c)
print('a == d:',a == d)
print('a > b:',a > b)
#print('a < c:',a < c) #error por ser mezcla de enteros y str
print('e > a:',e > a)
print('f > e:',f > e)
print('a != b:',a != b)

# subindices
b = [1,2,3,[4,9,'k'],5,4,7,8,4]
print('b',b)
print('b[0]',b[0])
print('b[1]',b[1])
print('b[2]',b[2])
print('b[3]',b[3])
print('b[4]',b[4])
print('b[5]',b[5])
print('b[3][0]',b[3][0])
print('b[3][1]',b[3][1])
print('b[3][2]',b[3][2])

# Metodos listas
# len() longitud de la lista
a = [1,8]
b = [1,8,3]
ac = []
print('len(a):',len(a))

# append()  agregar un elemento al final de la lista
ac.append(7)
print('new ac:',ac)

# append()  agregar un elemento al final de la lista
a.append(7)
print('new a:',a)

a.append([7,8,9])   #Agrega una lista al final de la lista principal
print('new a:',a)

# insert()
a.insert(3,'h')     #Agrega en el indice 3 de la lista el elemento 'h'
print('new a (insert):',a)

# remove()
a.remove(7)         #Borra la primera aparicion del elemento 7 en la lista
print('new a (remove):',a)

a.remove([7,8,9])         #Borra la primera aparicion del elemento [7,8,9] en la lista
print('new a (remove 2):',a)

# slice()
b = [1,2,3,[4,4,4],5,4,7,8,4]
sublista = slice(1,4,2)     #Coja desde indice 1 hasta 4 sin incluir de 2 en 2
print('lista: ',b)
print('sublista: ',b[sublista])

# count()
print('conteo:',b.count(4))       #Cuenta los elementos 4 individuales en la lista
print('conteo:',b[3].count(4))       #Cuenta los elementos 4 en la sublista que esta en el indice 3

# index()
print('index:',b.index(4))       #Devuelve el indice de la primera aparicion de 4 en la lista

# max() con min() igual pero el minimo
c = [25,-8,96,0]
d = ['9','5','h']

print('c:',c)
print('max: ',max(c))             #Valor maximo en la lista
print('max: ',max(d))             #Valor Ascii maximo en la lista

# sort()
c.sort()
print('c ordenada con sort',c)    #ordena de menor a mayor (ascendente)

# reverse()
c.reverse()
print('c ordenada con reverse',c)    #ordena al reves de como estaba (si se hace primero sort, el resultado es descendente)

# pop()
print('pop',c.pop())          #Devuelve el ultimo elemento y lo borra
print('c despues de pop:',c)

# Tuplas
# unpacking
a,b,c,d = (1,2,3,4)
print(a)
print(b)
print(c)
print(d)

c = (1,2,3)
d = [5,6,7]
#e = c + d   #TypeError: can only concatenate tuple (not "list") to tuple
#print(e)
c = list(c)
e = c + d
print(e)

# Proponer una representacion con tuplas para las cartas de una baraja
cartas = ('A','2','3','4','5','6','7','8','9','10','J','Q','K',
          'A','2','3','4','5','6','7','8','9','10','J','Q','K',
          'A','2','3','4','5','6','7','8','9','10','J','Q','K',
          'A','2','3','4','5','6','7','8','9','10','J','Q','K')

# Escribir una función poker que reciba cinco cartas de la baraja e informe si esas cartas forman
# o no un poker (es decir que hay 4 cartas con el mismo número).

def poker(juego):
  for i in range(2):        # Hasta la segunda carta porque si en la primera o seguna no encontro 4 cartas no hay poker
    j = juego.count(juego[i])
    if (j == 4):
      estado = 'poker'
      return estado
    else:
      estado = 'no poker'
  return estado


c = ['J','J','5','J','J']       # Juego del usuario
prueba = poker(c)
print(prueba)

# Escribir una función poker que reciba cinco cartas de la baraja e informe si esas cartas forman
# o no un poker (es decir que hay 4 cartas con el mismo número). Con cartas aleatorias

import random

def juego(c):
  mi_baraja = []
  for i in range(5):              #Saca las 5 cartas aleatorias
    mi_baraja.append(c[random.randint(0,51)])
  resultado = poker(mi_baraja)
  return mi_baraja,resultado

# Funcion que define si tengo poker o no
def poker(mi_juego):
  for i in range(2):      # Hasta la segunda carta porque si en la primera o seguna no encontro 4 cartas no hay poker
    j = mi_juego.count(mi_juego[i])
    if (j == 4):
      estado = 'poker'
      return estado
    else:
      estado = 'no poker'
  return estado


cartas = ('A','2','3','4','5','6','7','8','9','10','J','Q','K',
          'A','2','3','4','5','6','7','8','9','10','J','Q','K',
          'A','2','3','4','5','6','7','8','9','10','J','Q','K',
          'A','2','3','4','5','6','7','8','9','10','J','Q','K')
mi_mano = juego(cartas)
print(mi_mano)

# Coger elementos aleatoriamente de una lista sin repeticion (random.sample(lista o tupla,elementos))
# devuelve una lista con los elementos aleatorios
import random
colors = ("R", "G", "B")
print(random.sample(colors, 2))
print(colors)   #No modifica la lista original



# Coger elementos aleatoriamente de una lista con repeticion (random.choices(lista o tupla, k=elementos))
# devuelve una lista con los elementos aleatorios
import random
colors = ("R", "G", "B")
print(random.choices(colors, k=4))
print(colors)   #No modifica la lista original

# Escribir una función poker que reciba cinco cartas de la baraja e informe si esas cartas forman
# o no un poker (es decir que hay 4 cartas con el mismo número). Con cartas aleatorias

import random

def juego(c):
  mi_baraja = random.sample(c, 5)
  resultado = poker(mi_baraja)
  return mi_baraja,resultado

# Funcion que define si tengo poker o no
def poker(mi_juego):
  for i in range(2):      # Hasta la segunda carta porque si en la primera o seguna no encontro 4 cartas no hay poker
    j = mi_juego.count(mi_juego[i])
    if (j == 4):
      estado = 'poker'
      return estado
    else:
      estado = 'no poker'
  return estado



cartas = ('A','2','3','4','5','6','7','8','9','10','J','Q','K',
          'A','2','3','4','5','6','7','8','9','10','J','Q','K',
          'A','2','3','4','5','6','7','8','9','10','J','Q','K',
          'A','2','3','4','5','6','7','8','9','10','J','Q','K')

mi_mano = juego(cartas)
print(mi_mano)

# Producto escalar de dos vectores a = [1,3,4]  b = [8, 7, 6]  a.b = 1*8 + 3*7 + 4*6 = 53

# Definir si dos vectores son ortogonales a.b = 0

# Calcular la norma de un vector a = [x,y,z]  |a|=(x**2 + y**2 + z**2)**(1/2)

# Definir si dos vectores son paralelos a.b = |a||b|

# Definir si dos vectores son paralelos a = [x1,y1,z1] b = [x2,y2,z2] -> si existe un escalar k tal que al hacer el producto de k*a = b